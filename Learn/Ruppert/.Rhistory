data_path = 'G:\Datasets\Ruppert'
data_path = "G:\Datasets\Ruppert"
data_path = "G:/Datasets/Ruppert"
data_file = "Stock_Bond.csv"
read.csv2(data_path + '/' + data_file)
read.csv2(data_path + "/" + data_file)
"a" + "2"
read.csv2(paste(data_path, "/", data_file))
read.csv2(paste(data_path,"/",data_file))
data_path = "G:\Datasets\Ruppert"
data_path = "G:/Datasets/Ruppert"
data_file = "Stock_Bond.csv"
read.csv2(paste(data_path,"/",data_file))
read.csv2(paste0(data_path,"/",data_file))
df = read.csv2(paste0(data_path,"/",data_file))
df.head()
head(df)
n = dim(dat)[1]
n = dim(df)[1]
df.GM_AC
df["GM_AC"]
df = read.csv2(paste0(data_path,"/",data_file), header = TRUE)
head(df)
df = read.csv(paste0(data_path,"/",data_file), header = TRUE)
head(df)
df["GM_AC"]
df.GM_AC
df["GM_AC"]
attach(df)
GM_AC[-1]
GM_AC
GM_AC[-1]
GM_AC
GM_AC[-2]
GM_AC
GM_AC[-1]
GM_Returns = GM_AC[-1]/GM_AC[-n] - 1
n
GM_Return
GM_Return = GM_AC[-1]/GM_AC[-n] - 1
GM_Return
GM_AC[-n]
xx = 1:4
xx
xx[-1]
xx[-3]
FReturn = F_AC[-1]/F_AC[-n] - 1
GMReturn = GM_AC[-1]/GM_AC[-n] - 1
FReturn = F_AC[-1]/F_AC[-n] - 1
par(mfrow = c(1, 1))
plot(GMReturn,FReturn)
logGM = log(GMReturn + 1)
logF = log(FReturn + 1)
plot(logGM, GMReturn)
cor(logGM, GMReturn)
MSFT_ret = MSFT_AC[-1]/MSFT_AC[-n] - 1
MRK_ret = MRK_AC[-1]/MRK_AC[-n] - 1
plot(MSFT_ret, MRK_ret)
cor(MSFT_ret, MRK_ret)
cor(GMReturn, FReturn)
niter = 1e5
below = rep(0, niter)
rep(0,4)
set.seed(2009)
rnorm(45)
for (i in 1:niter) {
r = rnorm(45, mean = mu/253, sd = s/sqrt(253))
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice)
below[i] = as.numeric(minlogP < log(950000))
}
mu = 0.05
s = 0.23
for (i in 1:niter) {
r = rnorm(45, mean = mu/253, sd = s/sqrt(253))
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice)
below[i] = as.numeric(minlogP < log(950000))
}
mean(below)
for (i in 1:niter) {
r = rnorm(100, mean = mu/253, sd = s/sqrt(253))
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice)
below[i] = as.numeric(minlogP < log(950000))
}
mean(below)
argmin(logPrice)
which.min(a)
a = c(2,5,6,1,4)
which.min(a)
a = 4
a > 7 & a < 8
above = rep(0, niter)
for (i in 1:niter) {
r = rnorm(100, mean = mu/253, sd = s/sqrt(253))
logPrice = log(1e6) + cumsum(r)
maxlogP = max(logPrice)
minlogP = min(logPrice)
rule = which.min(maxlogP) < which.min(minlogP)
above[i] = as.numeric((maxlogP > log(1100000)) & rule)
}
mean(above)
rule
for (i in 1:niter) {
r = rnorm(100, mean = mu/253, sd = s/sqrt(253))
logPrice = log(1e6) + cumsum(r)
maxlogP = max(logPrice)
minlogP = min(logPrice)
rule = minlogP > log(950000)
rule = rule | (minlogP < log(950000) & which.min(maxlogP) < which.min(minlogP))
above[i] = as.numeric((maxlogP > log(1100000)) & rule)
}
mean(above)
rule = maxlogP > log(1100000)
for (i in 1:niter) {
r = rnorm(100, mean = mu/253, sd = s/sqrt(253))
logPrice = log(1e6) + cumsum(r)
maxlogP = max(logPrice)
minlogP = min(logPrice)
rule1 = minlogP > log(950000)
rule2 = minlogP < log(950000) & maxlogP > log(1100000)
rule3 = which.min(maxlogP) < which.min(minlogP)
rule = rule1 | rule2 & rule3
above[i] = as.numeric((maxlogP > log(1100000)) & rule)
rule = maxlogP < log(1100000)
rule = rule | (maxlogP > log(1100000) & which.min(maxlogP) > which.min(minlogP))
below[i] = as.numeric((minlogP < log(950000)) & rule)
}
mean(above)
mean(below)
for (i in 1:niter) {
r = rnorm(100, mean = mu/253, sd = s/sqrt(253))
logPrice = log(1e6) + cumsum(r)
maxlogP = max(logPrice)
minlogP = min(logPrice)
rule1 = minlogP > log(950000)
rule2 = minlogP < log(950000) & maxlogP > log(1100000)
rule3 = which.min(maxlogP) < which.min(minlogP)
rule = rule1 | rule2 & rule3
above[i] = as.numeric((maxlogP > log(1100000)) & rule)
rule1 = maxlogP < log(1100000)
rule2 = minlogP < log(950000) & maxlogP > log(1100000)
rule3 = which.min(maxlogP) > which.min(minlogP)
rule = rule1 | rule2 & rule3
below[i] = as.numeric((minlogP < log(950000)) & rule)
}
mean(above)
mean(below)
E = m_a * 100000 + m_b* (-50000)
E
m_a = mean(above)
m_b = mean(below)
E = m_a * 100000 + m_b* (-50000)
E
m_a
m_b
sells = rep(0, niter)
for (i in 1:niter) {
r = rnorm(100, mean = mu/253, sd = s/sqrt(253))
logPrice = log(1e6) + cumsum(r)
maxlogP = max(logPrice)
maxDay = which.min(maxlogP)
minlogP = min(logPrice)
minDay = which.min(minlogP)
rule1 = minlogP > log(950000)
rule2 = minlogP < log(950000) & maxlogP > log(1100000)
rule3 = maxDay < minDay
rule = rule1 | rule2 & rule3
above[i] = as.numeric((maxlogP > log(1100000)) & rule)
if (above[i]) {
sells[i] = maxDay
}
rule1 = maxlogP < log(1100000)
rule2 = minlogP < log(950000) & maxlogP > log(1100000)
rule3 = maxDay > minDay
rule = rule1 | rule2 & rule3
below[i] = as.numeric((minlogP < log(950000)) & rule)
if (below[i]) {
sells[i] = maxDay
}
}
m_s = mean(sells)
m_s
sells[sells >0]
maxDay
which.min(maxlogP)
maxlogP
maxDay = which.min(logPrice)
maxDay
for (i in 1:niter) {
r = rnorm(100, mean = mu/253, sd = s/sqrt(253))
logPrice = log(1e6) + cumsum(r)
maxlogP = max(logPrice)
maxDay = which.min(logPrice)
minlogP = min(logPrice)
minDay = which.min(logPrice)
rule1 = minlogP > log(950000)
rule2 = minlogP < log(950000) & maxlogP > log(1100000)
rule3 = maxDay < minDay
rule = rule1 | rule2 & rule3
above[i] = as.numeric((maxlogP > log(1100000)) & rule)
if (above[i]) {
sells[i] = maxDay
}
rule1 = maxlogP < log(1100000)
rule2 = minlogP < log(950000) & maxlogP > log(1100000)
rule3 = maxDay > minDay
rule = rule1 | rule2 & rule3
below[i] = as.numeric((minlogP < log(950000)) & rule)
if (below[i]) {
sells[i] = maxDay
}
}
m_s = mean(sells)
m_a = mean(above)
m_b = mean(below)
E = m_a * 100000 + m_b* (-50000)
m_s
E/m_s
